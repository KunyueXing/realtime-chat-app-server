openapi: 3.0.3
info:
  title: Real-Time Chat App API
  version: 1.0.0
  description: >
    RESTful API for a real-time chat application, supporting user and chat management, messaging, media, calls, and more.
servers:
  - url: https://tobedefined.com/api/v1
    description: Production server
  - url: http://localhost:3000/api/v1
    description: Local development server

tags:
  - name: Auth
  - name: Users
  - name: Friends
  - name: Chats
  - name: Groups
  - name: Messages
  - name: Calls
  - name: Notifications
  - name: Media
  - name: AI
  - name: Admin (optional)

paths:
  /auth/register:
    post:
      tags: [Auth]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UserRegister' }
      responses:
        '201':
          description: User registered, email verification sent
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
        '409':
          description: Email is already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Email is already exists

  /auth/verify:
    post:
      tags: [Auth]
      summary: Verify registered email
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UserVerify' }
      responses:
        '200':
          description: Email successfully verified
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Email verified successfully
        '400':
          description: Invalid email format or OTP has expired
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid email format or OTP has expired
        '409':
          description: Email is already verified
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Email is already verified
        '401':
          description: Incorrect OTP provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Incorrect OTP

  /auth/login:
    post:
      tags: [Auth]
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UserLogin' }
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AuthResponse' }
        '400':
          description: Missing required fields
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Email and password are required'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Invalid email or password'
        '403':
          description: Email not verified or account disabled
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Please verify your email first'
        '429':
          description: Too many login attempts
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Too many login attempts. Try again later'

  /auth/logout:
    post:
      tags: [Auth]
      summary: Logout
      responses:
        '204':
          description: Logout successful

  /auth/forgot-password:
    post:
      tags: [Auth]
      summary: Request a password reset email
      description: Sends a password reset OTP or link to the provided email.
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/PasswordResetRequest' }
      responses:
        '200':
          description: Password reset instructions sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password reset instructions have been sent to your email.
        '400':
          description: Email field is missing or invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Please provide a valid email address.
        '404':
          description: Email not found in the system
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: No account is associated with this email.
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Too many reset attempts. Please try again later.
        '500':
          description: Server error while sending email
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Failed to send password reset email. Please try again later.

  /auth/reset-password:
    post:
      tags: [Auth]
      summary: Reset user password using OTP
      description: Allows the user to reset their password using a valid email and OTP.
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/PasswordReset' }
      responses:
        '200':
          description: Password reset successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password has been reset successfully.
        '400':
          description: Missing fields or invalid data
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Email, OTP, and new password are required.
        '401':
          description: Invalid or expired OTP
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: The provided OTP is incorrect or has expired.
        '404':
          description: Email not registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: No user found with this email.
        '409':
          description: Password already used recently (optional)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: New password cannot be the same as the previous password.
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Failed to reset password. Please try again later.

  /users/me:
    get:
      tags: [Users]
      summary: Get current user profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
        '401':
          description: Unauthorized - Invalid or missing token
    patch:
      tags: [Users]
      summary: Update own profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UserProfileUpdate' }
      responses:
        '200':
          description: User profile updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
        '400':
          description: Bad request - Invalid input data
        '401':
          description: Unauthorized - Invalid or missing token

  /users/search:
    get:
      tags: [Users]
      summary: Search for users
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UserSearchQuery'
      responses:
        '200':
          description: List of matched users
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/User' }
        '400':
          description: Bad request - Missing or malformed query parameter
        '401':
          description: Unauthorized - Invalid or missing token

  /users/{userId}:
    get:
      tags: [Users]
      summary: Get user profile by ID
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        '200':
          description: User profile retrieved
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
        '404':
          description: User not found
        '401':
          description: Unauthorized - Invalid or missing token

  /users/non-friends:
    get:
      tags: [Users]
      summary: List users who are not friends
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of non-friend users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized - Invalid or missing token

  /friends/requests:
    post:
      tags: [Friends]
      summary: Send a friend request
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/FriendRequestSend' }
      responses:
        '201':
          description: Friend request sent
        '400':
          description: Bad request - Missing or invalid target user ID
        '401':
          description: Unauthorized - User not authenticated
        '409':
          description: Conflict - Friend request already sent or users already friends

    get:
      tags: [Friends]
      summary: List incoming/outgoing friend requests
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of friend requests
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/FriendRequest' }
        '401':
          description: Unauthorized - User not authenticated

  /friends/requests/{requestId}/accept:
    post:
      tags: [Friends]
      summary: Accept a friend request
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/RequestId'
      responses:
        '200':
          description: Friend request accepted
        '401':
          description: Unauthorized - User not authenticated
        '404':
          description: Friend request not found
        '409':
          description: Conflict - Request already accepted/rejected

  /friends/requests/{requestId}/reject:
    post:
      tags: [Friends]
      summary: Reject a friend request
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/RequestId'
      responses:
        '200':
          description: Friend request rejected
        '401':
          description: Unauthorized - User not authenticated
        '404':
          description: Friend request not found
        '409':
          description: Conflict - Request already handled

  /friends:
    get:
      tags: [Friends]
      summary: List all friends
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of friends
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/User' }
        '401':
          description: Unauthorized - User not authenticated

  /friends/{friendUserId}:
    delete:
      tags: [Friends]
      summary: Remove a friend
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        '204':
          description: Friend removed successfully
        '401':
          description: Unauthorized - User not authenticated
        '404':
          description: Friend not found

  /chats:
    get:
      tags: [Chats]
      summary: List all chats (1:1 and group)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of chats
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Chat'
        '401':
          description: Unauthorized - User not authenticated

  /chats/search:
    get:
      tags: [Chats]
      summary: Search for a chat
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/schemas/ChatSearchQuery'
      responses:
        '200':
          description: Array of chats
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Chat' }
        '400':
          description: Bad Request - Missing or invalid query parameter
        '401':
          description: Unauthorized - User not authenticated

  /chats/{chatId}:
    get:
      tags: [Chats]
      summary: Get chat by ID
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ChatId'
      responses:
        '200':
          description: Chat details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
        '401':
          description: Unauthorized - User not authenticated
        '403':
          description: Forbidden - User not a participant in this chat
        '404':
          description: Chat not found

  /chats/{chatId}/pin:
    post:
      tags: [Chats]
      summary: Pin a chat
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ChatId'
      responses:
        '200':
          description: Chat pinned
        '401':
          description: Unauthorized - User not authenticated
        '403':
          description: Forbidden - User not a participant in this chat
        '404':
          description: Chat not found

  /chats/{chatId}/unpin:
    post:
      tags: [Chats]
      summary: Unpin a chat
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ChatId'
      responses:
        '200':
          description: Chat unpinned
        '401':
          description: Unauthorized - User not authenticated
        '403':
          description: Forbidden - User not a participant in this chat
        '404':
          description: Chat not found

  /chats/{chatId}/messages:
    post:
      tags: [Messages]
      summary: Send a message in a chat
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ChatId'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/MessageSend' }
      responses:
        '201':
          description: Message sent
        '400':
          description: Invalid message data
        '401':
          description: Unauthorized - User not authenticated
        '403':
          description: Forbidden - User not part of this chat
        '404':
          description: Chat not found

    get:
      tags: [Messages]
      summary: Get messages in a chat
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ChatId'
        - name: before
          in: query
          schema: { type: string, format: date-time }
          description: Fetch messages before this timestamp
        - name: limit
          in: query
          schema: { type: integer, default: 30 }
          description: Number of messages to fetch
      responses:
        '200':
          description: Array of messages
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Message' }
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - User not part of this chat
        '404':
          description: Chat not found

  /chats/{chatId}/starred-messages:
    get:
      summary: List current user's starred messages in a chat
      description: Retrieve all messages starred by the current user in the specified chat.
      tags: [Messages]
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ChatId'
      responses:
        '200':
          description: List of starred messages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
        '401':
          description: Unauthorized - authentication required
        '404':
          description: Chat not found

  /chats/{chatId}/media:
    get:
      tags: [Media]
      summary: List all media (including links, files, audios, images and videos) in a chat
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ChatId'
      responses:
        '200':
          description: Media list retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Media' }
        '401':
          description: Unauthorized
        '404':
          description: Chat not found

  /chats/ai/messages:
    post:
      tags: [AI]
      summary: Send message to AI chat
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/AIMessageSend' }
      responses:
        '200':
          description: AI response returned
        '400':
          description: Invalid input (missing or invalid message)
        '401':
          description: Unauthorized
        '500':
          description: AI service error

    get:
      tags: [AI]
      summary: Get AI chat history
      security:
        - bearerAuth: []
      responses:
        '200':
          description: AI chat messages
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Message' }
        '401':
          description: Unauthorized
        '500':
          description: Error retrieving history

  /messages/{messageId}:
    patch:
      tags: [Messages]
      summary: Edit a message
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/MessageId'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/MessageEdit' }
      responses:
        '200':
          description: Message edited
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Message' }
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Cannot edit message
        '404':
          description: Message not found

    delete:
      tags: [Messages]
      summary: Delete a message
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/MessageId'
      responses:
        '204':
          description: Message deleted
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Cannot delete message
        '404':
          description: Message not found

  /messages/{messageId}/star:
    post:
      tags: [Messages]
      summary: Star a message
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/MessageId'
      responses:
        '200':
          description: Message starred
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Cannot star this message
        '404':
          description: Message not found

  /messages/{messageId}/unstar:
    post:
      tags: [Messages]
      summary: Unstar a message
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/MessageId'
      responses:
        '200':
          description: Message unstarred
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Cannot unstar this message
        '404':
          description: Message not founds

  /groups:
    post:
      tags: [Groups]
      summary: Create a group chat
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/GroupCreate' }
      responses:
        '201':
          description: Group created
        '400':
          description: Invalid group data
        '401':
          description: Unauthorized
    get:
      tags: [Groups]
      summary: List group chats
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of groups
        '401':
          description: Unauthorized

  /groups/{groupId}:
    get:
      tags: [Groups]
      summary: Get group info
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/GroupId'
      responses:
        '200':
          description: Group
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Group' }
        '401':
          description: Unauthorized
        '404':
          description: Group not found

  /groups/{groupId}/invite:
    post:
      tags: [Groups]
      summary: Invite members to group
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/GroupId'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/GroupInvite' }
      responses:
        '200':
          description: Members invited
        '400':
          description: Invalid member IDs
        '401':
          description: Unauthorized
        '403':
          description: Only group admin can invite members
        '404':
          description: Group not found

  /groups/{groupId}/accept:
    post:
      tags: [Groups]
      summary: Accept group invitation
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/GroupId'
      responses:
        '200':
          description: Invitation accepted
        '401':
          description: Unauthorized
        '404':
          description: Group or invitation not found
        '409':
          description: Already a group member

  /groups/{groupId}/reject:
    post:
      tags: [Groups]
      summary: Reject group invitation
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/GroupId'
      responses:
        '200':
          description: Invitation rejected
        '401':
          description: Unauthorized
        '404':
          description: Group or invitation not found

  /groups/{groupId}/leave:
    post:
      tags: [Groups]
      summary: Leave group
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/GroupId'
      responses:
        '200':
          description: Left group
        '401':
          description: Unauthorized
        '404':
          description: Group not found

  /groups/{groupId}/members/{userId}:
    delete:
      tags: [Groups]
      summary: Remove member (admin only)
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/GroupId'
        - $ref: '#/components/parameters/UserId'
      responses:
        '204':
          description: Member removed
        '401':
          description: Unauthorized
        '403':
          description: Only admin can remove members
        '404':
          description: Group or user not found

  /calls/audio:
    post:
      tags: [Calls]
      summary: Start audio call with friend
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              - $ref: '#/components/schemas/CallReceipient'
      responses:
        '201':
          description: Audio call started successfully
        '400':
          description: Invalid request payload
        '404':
          description: Recipient not found
        '500':
          description: Server error

  /calls/video:
    post:
      tags: [Calls]
      summary: Start video call with friend
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              - $ref: '#/components/schemas/CallReceipient'
      responses:
        '201':
          description: Video call started
        '400':
          description: Invalid request payload
        '404':
          description: Recipient not found
        '500':
          description: Server error

  /groups/{groupId}/calls/audio:
    post:
      tags: [Calls]
      summary: Start group audio call
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/GroupId'
      responses:
        '201':
          description: Group audio call started
        '404':
          description: Group not found
        '403':
          description: Unauthorized to start group call
        '500':
          description: Server error

  /groups/{groupId}/calls/video:
    post:
      tags: [Calls]
      summary: Start group video call
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/GroupId'
      responses:
        '201':
          description: Group video call started
        '404':
          description: Group not found
        '403':
          description: Unauthorized to start group call
        '500':
          description: Server error

  /calls/audio/{audioCallId}/end:
    post:
      tags: [Call]
      summary: End an ongoing audio call
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/AudioCallId'
      responses:
        '200':
          description: Audio call ended successfully
        '404':
          description: Call not found
        '500':
          description: Server error

  /calls/video/{videoCallId}/end:
    post:
      tags: [Call]
      summary: End an ongoing video call
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/VideoCallId'
      responses:
        '200':
          description: Video call ended successfully
        '404':
          description: Call not found
        '500':
          description: Server error

  /notifications:
    get:
      tags: [Notifications]
      summary: Get notifications
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Notification list retrieved
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Notification' }

  /notifications/{notificationId}/read:
    post:
      tags: [Notifications]
      summary: Mark notification as read
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/NotificationId'
      responses:
        '200':
          description: Notification read
        '404':
          description: Notification not found
        '500':
          description: Server error

components:
  parameters:
    UserSearchQuery:
      name: query
      in: query
      required: true
      schema: { type: string }
      description: Username or email to search for
    ChatSearchQuery:
      name: query
      in: query
      required: true
      schema: { type: string }
      description: Chat name or participant to search for
    UserId:
      name: userId
      in: path
      required: true
      schema: { type: string }
      description: ID of the user
    RequestId:
      name: requestId
      in: path
      required: true
      schema: { type: string }
      description: ID of the friend request
    ChatId:
      name: chatId
      in: path
      required: true
      schema: { type: string }
      description: ID of the chat
    GroupId:
      name: groupId
      in: path
      required: true
      schema: { type: string }
      description: ID of the group
    MessageId:
      name: messageId
      in: path
      required: true
      schema: { type: string }
      description: ID of the message
    AudioCallId:
      name: audioCallId
      in: path
      required: true
      schema: { type: string }
      description: ID of the audio call
    VideoCallId:
      name: videoCallId
      in: path
      required: true
      schema: { type: string }
      description: ID of the video call
    NotificationId:
      name: notificationId
      in: path
      required: true
      schema: { type: string }
      description: ID of the notification

  schemas:
    User:
      type: object
      properties:
        id: { type: string }
        username: { type: string }
        email: { type: string }
        avatar: { type: string }
        displayName: { type: string }
        bio: { type: string }
        createdAt: { type: string, format: date-time }
    UserRegister:
      type: object
      properties:
        username: { type: string }
        email: { type: string }
        password: { type: string }
      required: [username, email, password]
    UserVerify:
      type: object
      properties:
        email: { type: string }
        code: { type: string }
      required: [email, code]
    UserLogin:
      type: object
      properties:
        email: { type: string }
        password: { type: string }
      required: [email, password]
    PasswordResetRequest:
      type: object
      properties:
        email: { type: string }
      required: [email]
    PasswordReset:
      type: object
      properties:
        email: { type: string }
        code: { type: string }
        newPassword: { type: string }
      required: [email, code, newPassword]
    AuthResponse:
      type: object
      properties:
        token: { type: string }
        user: { $ref: '#/components/schemas/User' }
    UserProfileUpdate:
      type: object
      properties:
        avatar: { type: string }
        bio: { type: string }
        displayName: { type: string }
    FriendRequestSend:
      type: object
      properties:
        targetUserId: { type: string }
      required: [targetUserId]
    FriendRequest:
      type: object
      properties:
        id: { type: string }
        from: { $ref: '#/components/schemas/User' }
        to: { $ref: '#/components/schemas/User' }
        status: { type: string, enum: [pending, accepted, rejected] }
        createdAt: { type: string, format: date-time }
    Chat:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        isGroup: { type: boolean }
        members:
          type: array
          items: { $ref: '#/components/schemas/User' }
        avatar: { type: string }
        pinned: { type: boolean }
        lastMessage: { $ref: '#/components/schemas/Message' }
        createdAt: { type: string, format: date-time }
    Message:
      type: object
      properties:
        id: { type: string }
        chatId: { type: string }
        sender: { $ref: '#/components/schemas/User' }
        recipient: { $ref: '#/components/schemas/User' }
        content: { type: string }
        type: { type: string, enum: [text, image, file, emoji, link, video, audio] }
        attachments:
          type: array
          items: { $ref: '#/components/schemas/Media' }
        starredBy:
          type: array
          items: { $ref: '#/components/schemas/User' }
        readBy:
          type: array
          items: { $ref: '#/components/schemas/User' }
        createdAt: { type: string, format: date-time }
    MessageSend:
      type: object
      properties:
        content: { type: string }
        recipientId: { type: string }
        type: { type: string, enum: [text, image, file, emoji, link, video, audio] }
        attachments:
          type: array
          items: { $ref: '#/components/schemas/Media' }
      required: [content, type, recipientId]
    MessageEdit:
      type: object
      properties:
        content: { type: string }
      required: [content]
    SecuritySchemes:
      BearerAuth:
        type: http
        scheme: bearer
        bearerFormat: JWT
    Group:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        avatar: { type: string }
        members:
          type: array
          items: { $ref: '#/components/schemas/User' }
        admins:
          type: array
          items: { $ref: '#/components/schemas/User' }
        createdAt: { type: string, format: date-time }
    GroupCreate:
      type: object
      properties:
        name: { type: string }
        memberIds:
          type: array
          items: { type: string }
      required: [name, memberIds]
    GroupInvite:
      type: object
      properties:
        memberIds:
          type: array
          items: { type: string }
      required: [memberIds]
    Media:
      type: object
      properties:
        id: { type: string }
        url: { type: string }
        type: { type: string, enum: [image, video, audio, file] }
        size: { type: integer }
        title: { type: string }
        description: { type: string }
        previewImage: { type: string }
        uploadedAt: { type: string, format: date-time }
      required: [id, url, type, size]
    AIMessageSend:
      type: object
      properties:
        message: { type: string }
      required: [message]
    CallReceipient:
      type: object
      properties:
        targetUserId: { type: string }
      required: [targetUserId]
    Notification:
      type: object
      properties:
        id: { type: string }
        type: { type: string }
        message: { type: string }
        read: { type: boolean }
        createdAt: { type: string, format: date-time }
